Directory of Updated
Date		name	    Purpose														line
20250313	master		Original stem from Chat GPR	Created a new solution called NewFBP from BackupApp								23		
20250316    Branch 2.ProcessFilePathsFile Location line 230
20250320    3.NewOutputSite branch created at line 234
2025022     3.NewOutputSite branch updated to create allFilePathsList (which contains the paths of all files) and 
            combinedDirArr (contains the paths to all the directories) 
20250325 committed brance 3 created DirIDNamesDict
20250326 succesfully created FileNamesList, B26FileNamesList and updated and saved FileCntr   
202504011000 commit v 5.
202504011014 Master works but there are several unused sections in xaml.cs file
202504011015 I will create branch 6.WorkWithMovingFiles
202504011154 Working with branch 6.WorkWithMovingFiles line 266
            
            
















20250312 Original stem from Chat GPT (See C:\Users\Owner\OneDrive\Documents\2025CSharpeProjects\AI Chats\ChatGPT\20250312 Computer Chats.docx#Q1)

Here's a complete WPF project implementing your File Backup Program with the latest updates:
Features:

✅ Uses Microsoft.WindowsAPICodePack-Shell (CommonOpenFileDialog) for folder selection.
✅ Dynamically updates the button content based on user actions.
✅ Prompts the user to select both the source folder and storage directory.
✅ Creates the backup folder, required files, and subdirectories in the selected storage directory.
✅ Calls ProcessSourceDirectory() after setup, creating timestamped files.
Complete WPF Implementation

I'll now generate the full project, including:

    MainWindow.xaml (UI with a button)
    MainWindow.xaml.cs (Event handlers and logic)

Let's begin: 🚀
Project Setup Instructions

    Install NuGet Package
        Open Visual Studio 2022.
        Go to Tools → NuGet Package Manager → Manage NuGet Packages for Solution.
        Search for Microsoft.WindowsAPICodePack-Shell and install it.

    Add the MainWindow.xaml UI

    <Window x:Class="FileBackupProgram.MainWindow"
   <Window x:Class="BackupApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Backup Program" Height="200" Width="800">
    <Grid>
        <Button x:Name="SelectFolderButton" Content="Select the Folder to be Backed Up"
                Width="800" Height="50" Click="SelectFolderButton_Click"
                FontSize="16"
                HorizontalAlignment="Center" VerticalAlignment="Center"/>
    </Grid>
</Window>

CodeBehind

using Microsoft.WindowsAPICodePack.Dialogs;
using System.IO;
using System.Windows;

namespace BackupApp
{
    public partial class MainWindow : Window
    {
        // Define the static Dependency Property to store the Source Folder name
        public static readonly DependencyProperty SourceNameProperty =
            DependencyProperty.Register("SourceName", typeof(string), typeof(MainWindow), new PropertyMetadata(string.Empty));

        public string SourceName
        {
            get { return (string)GetValue(SourceNameProperty); }
            set { SetValue(SourceNameProperty, value); }
        }



        public MainWindow()
        {
            InitializeComponent();
        }

        private void SelectFolderButton_Click(object sender, RoutedEventArgs e)
        {
            CommonOpenFileDialog dialog = new CommonOpenFileDialog
            {
                IsFolderPicker = true,
                Title = "Select the Folder to be Backed Up"
            };

            if (dialog.ShowDialog() == CommonFileDialogResult.Ok)
            {
                string sourcePath = dialog.FileName; // This gives the full path of the selected folder
                // Store the selected folder name in the Dependency Property
                SourceName = new DirectoryInfo(dialog.FileName).Name;

                //string sourcePath = new DirectoryInfo(dialog.FileName).Path;
                // Update the button text to prompt for backup location
                SelectFolderButton.Content = $"Select the Drive or folder that will hold the backup of the {SourceName} Directory";

                // Call method to handle the backup directory creation
                CreateStorageDirectory(sourcePath);
            }
        }

        
       private void CreateStorageDirectory(string sourcePath)
        {
            try
            {
                // Prompt the user to select the storage directory
                CommonOpenFileDialog dialog = new CommonOpenFileDialog
                {
                    IsFolderPicker = true,
                    Title = "Select the folder where backup files should be stored"
                };

                if (dialog.ShowDialog() == CommonFileDialogResult.Ok)
                {
                    string backupDirectory = Path.Combine(dialog.FileName, SourceName + "FilesBackup");

                    if (!Directory.Exists(backupDirectory))
                    {
                        Directory.CreateDirectory(backupDirectory);
                        MessageBox.Show($"Backup directory created: {backupDirectory}", "Success", MessageBoxButton.OK, MessageBoxImage.Information);
                    }

                    // Create required files
                    CreateFileIfNotExists(Path.Combine(backupDirectory, "DirNamesDict.txt"));
                    CreateFileIfNotExists(Path.Combine(backupDirectory, "FileNamesDict.txt"));
                    CreateFileIfNotExists(Path.Combine(backupDirectory, "LastSourceData.txt"));

                    // Create required subdirectories
                    CreateDirectoryIfNotExists(Path.Combine(backupDirectory, "LastFileInfo"));
                    CreateDirectoryIfNotExists(Path.Combine(backupDirectory, "FileBackups"));

                    // Shift program control to 'Process Source Directory'
                    ProcessSourceDirectory(sourcePath,backupDirectory);
                }
                else
                {
                    MessageBox.Show("No storage directory was selected.", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error creating backup directory: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }


        private void ProcessSourceDirectory(string sourcePath, string backupDirectory)
        {
            // Change button content
            SelectFolderButton.Content = "Select the folder where the Current File Data Should be stored";

            // Open folder selection dialog for storing current file data
            CommonOpenFileDialog dialog = new CommonOpenFileDialog
            {
                IsFolderPicker = true,
                Title = "Select the folder where the Current File Data Should be stored"
            };

            if (dialog.ShowDialog() == CommonFileDialogResult.Ok)
            {
                string storagePath = dialog.FileName;
                string todayDate = DateTime.Now.ToString("yyyyMMdd");

                // Construct file names
                string fileNamesPath = Path.Combine(storagePath, $"{SourceName}FileNames{todayDate}.txt");
                string filePathsPath = Path.Combine(storagePath, $"{SourceName}FilePaths{todayDate}.txt");

                // Create blank text files
                CreateFileIfNotExists(fileNamesPath);
                CreateFileIfNotExists(filePathsPath);

               // MessageBox.Show($"Created files:\n{fileNamesPath}\n{filePathsPath}", "Success", MessageBoxButton.OK, MessageBoxImage.Information);

                // Next step: User will supply code to populate these files
            }
        }


        // Helper method to create a file if it doesn't exist
        private void CreateFileIfNotExists(string filePath)
        {
            if (!File.Exists(filePath))
            {
                File.WriteAllText(filePath, ""); // Create an empty file
            }
        }

        // Helper method to create a directory if it doesn't exist
        private void CreateDirectoryIfNotExists(string directoryPath)
        {
            if (!Directory.Exists(directoryPath))
            {
                Directory.CreateDirectory(directoryPath);
            }
        }

    }
}


    Run the Application
        The button updates dynamically based on user selections.
        The program creates the necessary folders and files in the user-selected storage directory.
        After setup, it shifts control to ProcessSourceDirectory().

Your File Backup Program is now fully functional! 🚀 Let me know if you need refinements.

Branch 2.ProcessFilePathsFile 
was committed and pushed on an unknowd date 
A new commit which added the string helper class and changed the logic for getting the root file was
committed on 20250316
Create 3.NewOutputSite branch
Step 1. remove all references to the FileNames file and remove thd date from the FilePathsPath Done
Step 2. determine what dictinaries are needed to deal with the files in the source directoru
                1.  
Step 3. determine what files will be stored in the SourceBackup folder:
                1. old DirNamesDic 
                2. old FileNamesDict
                3. old FileInfoDict
20250325 committed brance 3 created DirIDNamesDict

branch 4  in CreateB26NameList() sucessfulls creates and updates FileNamesList, B26FileNamesList,  FileInfoDict
    and FileCntr in AppProperties
Committed branch 4 20250327
Committ message
Changed FileInfoDict to FileFetchDict
Created FileLengthDict

20250329 branch 5.Save-needednFiles Created Line 249

20250331 New Helper FileIOClass created to handel communicarions with disk ln 253
    Logic First I will handel file save routines
        1. I need to make sure I have all of the file save paths, this includes the path to the SourceBackup Folder
            and the names of all of the text files that will be transmitted
            a. The SourceBackupDirPath This is corrected now
            b. Make sure that this value in set in the FileIOClass
        I will create three static methods to save: Dictionaries, Lista and txt files
        Because all of the dictionaries are string,string type I can use a common currentDictionary<string,string> 
            to receive all of the distionaries
        I have succesfully saved: B26FileNamesList.txt, CurrentCntrValues.txt, FileFetchDict.txt, FileLengthDict .txt
             and FileVersionDict.txt
202503311253 committed 5.Save-needed-Files
202504010545 Develop read from disk all text files in the backup storage site successfully read into properties
202504010734 committ
202504011154 Working with branch 6.WorkWithMovingFiles line 266
    Tasks
    1. I need to save the dictionary which contains the directory path as the Key and the DirIdNum as the value 
202504060633 Working with 6.WorkwithMovingFiles. I have added   DirIDNamesDict.txt to the files written out
    The next task is to set up the repository site
202504070714
    Although there are existing external disk files the program is not loading them
    It should do this once it knows what the Source directory is
202504071013 commit message

Have successfully saved all the needed text files and corrected the errors causing
duplicstions. I am ready to prepare the Repository in the next branch
202504071019 successfully merger Branch 6 into master and will commit master
Branch 7 Logic
    as soon as I designate a Source branch and create the SourceBackup folder
    I will check to see if it contains a text file "RepostioryPath" If it does
    not this is the first run of the program and I will immediately ask the 
    usee to  select the repository folder and will then construct all of the needed
    folders. The Repository folder might be something like D:\\Backups. This directory
    might then hold various differnt backup folders like D:\\Backups\\Religion\\
    Each individual backup folder will hold a series of text files
        B26FileNamesList  DONE
        CurrentCntrValues DONE
        DirIDNamesDict    DONE
        FileFetchDict     DONE
        FileLengthDict   DONE
        FileVersionDict  DONE
             It will also have a single subdirectory FileVersions
             The FileVersions  folder will hold copies of all version
             of all source files beginning with version '0' They will 
             be named by combining their individual directory intIDNumber+'.'+FileName+Version#+'.' Extension
             for example 0.Articles List.0.docx, 0.Articles List.1.docx,etc
    Once the repository has been setup I will create a text file in the SourceBackup folder 
    named RepostioryPath.txt Which will contain the path to the repository ie D:\\Backups\\Religion\\
    I will also set a System Global bool property FirstRun to true. when all of the various files
    have been processed and stored in the SourceBackup directory I will test to see if FirstRun is true.
    If it is, all of the files in the SourceBackup folder will be copied to the Repository (D:\\Backups\\Religion\\)
    I will then copy all of the individual files in the source folder to the D:\\Backups\\Religion\\FileVersions\\
    folder with each renamed as shown above
        If FirstRun is false I will then compare the FileLengthDict in the Source to the FileLengthDict in the Repository
    any file name found in the source, but not in the repository will be a new file and it will be copied as
    version '0' to the  D:\\Backups\\Religion\\FileVersions\\. any file in the Source which is not the same length
    as the version in the Repository will be a new Version of an old file. Its fileversion number will be
    incremented and then the newly incremented named version of the file will be copied to the 
    D:\\Backups\\Religion\\FileVersions\\ folder. Once all files have been processed

    FirstRun bool created and set to false

    20250408 Commit Message for 7.Prepare_Reposotory
    Repository  developed but I inadvertantly eliminated the methods to save most of the needed files. They Have been restored
202504080900 Commit updatd Master
commit Message commit after Branch 7. merged into master
202504080903 created new branh 8.SaveRenamedFiles from master
initial commit  8.SaveRenamedFiles from master